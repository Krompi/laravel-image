server {
    listen 80;

    index index.php index.html;

    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;

    client_max_body_size 100M;

    root /var/www/public;

    disable_symlinks off;

    # Cross-Site-Scripting: 
    # 1: Enables XSS filtering (usually default in browsers). If a cross-site scripting attack is detected, the browser will sanitize the page (remove the unsafe parts).
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
    add_header X-XSS-Protection "1";

    # The HTTP Strict-Transport-Security response header (often abbreviated as HSTS) informs browsers that the site should only be accessed using HTTPS
    # max-age=<expire-time>: The time, in seconds, that the browser should remember that a site is only to be accessed using HTTPS.
    # includeSubDomains: If this optional parameter is specified, this rule applies to all of the site's subdomains as well.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # The X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a <frame>, <iframe>, <embed> or <object>.
    # SAMEORIGIN: The page can only be displayed in a frame on the same origin as the page itself.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
    add_header X-Frame-Options "SAMEORIGIN";

    # The X-Content-Type-Options response HTTP header is a marker used by the server to indicate that the MIME types advertised in the Content-Type headers should be followed and not be changed.
    # nosniff: Blocks a request if the request destination is of type style and the MIME type is not text/css
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
    add_header X-Content-Type-Options nosniff;

    # The Referrer-Policy HTTP header controls how much referrer information (sent with the Referer header) should be included with requests.
    # same-origin: Send the origin, path, and query string for same-origin requests. Don't send the Referer header for cross-origin requests.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
    add_header Referrer-Policy: same-origin;

    # The HTTP Cross-Origin-Embedder-Policy (COEP) response header prevents a document from loading any cross-origin resources that don't explicitly grant the document permission
    # require-corp: A document can only load resources from the same origin, or resources explicitly marked as loadable from another origin.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy
    add_header Cross-Origin-Embedder-Policy: require-corp;

    # The HTTP Cross-Origin-Resource-Policy response header conveys a desire that the browser blocks no-cors cross-origin/cross-site requests to the given resource. 
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Resource-Policy
    add_header Cross-Origin-Resource-Policy: same-origin;

    # The HTTP Cross-Origin-Opener-Policy (COOP) response header allows you to ensure a top-level document does not share a browsing context group with cross-origin documents
    # same-origin: Isolates the browsing context exclusively to same-origin documents.
    # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy
    add_header Cross-Origin-Opener-Policy: same-origin;

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass app:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }

    location / {
        disable_symlinks off;
        try_files $uri $uri/ /index.php?$query_string;
        gzip_static on;
    }
}